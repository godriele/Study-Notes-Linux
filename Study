#!/bin/bash

# Welcome to my Study Guide script. Users are able to add question, they can specify if its 
# multiple choice, or true/false. There will be a score system so users can keep track 
# how many they got right. Ive sectioned the script into parts

# The parts are:

# - Initialize Variables
#   Ex: score = 0, total_question =0

# - Load True/False Questions
# - Load Multiple Choice Questions
# - Show Quiz
# - Add questions
# - Display Score

# - Ask True or False Questions
# - Ask Multiple Choice Questions

# - Error Handling
# Main Menu


# ---------------------------------------------------------------------------------------
# Step 1: Check and Create the txt files, and load question it

# Create the True/False txt file
if [ ! -f "True_False_questions.txt" ]; then
	touch True_False_Questions.txt
	echo "Created the True/False txt File"
else
	echo "True/False txt file already created"
fi

# Create the Multiple Choice txt File
if [ ! -f "Multiple_Choice_questions.txt" ]; then
	touch Multiple_Choice_questions.txt
	echo "Created the Multiple Choice txt File"
else
	echo "Multiple Choice txt file already created"
fi


# Create the Enter Command txt file

if [ ! -f "Commands.txt" ]; then
	touch Commands.txt
	echo "Created the Commands.txt file"
else
	echo "Commands.txt file already exist"
fi

# ---------------------------------------------------------------------------------------
# Step 2: Initialize Variables
 
  score=0
  total_question=0
  true_false_file="True_False_questions.txt"
  multiple_choice_file="Multiple_Choice_questions.txt"
  enter_command_file="Commands.txt"


# --------------------------------------------------------------------------------------
# Step 3: Load Question from Files
# # Write functions to load questions from the .txt files

load_questions() {

   # I plan on loading the questions from the txt file into these array 
   true_false_questions=()
   multiple_choice_questions=()
   commands_questions=()
   

   # --------------------  True/False  ----------------------------------

   # Load True or False questions from the file
   while IFS= read -r line; do
	   # read the first line and let line hold onto it
	   # += adds it to the array 
	   true_false_questions+=("$line")
   done < "$true_false_file"

   #--------------------  Multiple Choice  -------------------------------

   # Load Muctiple Choice questions from the file

   while IFS= read -r line; do
	   multiple_choice_question+=("$line")
   done < "$multiple_choice_file"

   # basically reading the txt file and outputting it in the array 
   
   # -------------------- Commands Questions -----------------------------
   # New Addition:
   # Loading command questions in the commands_questions array
   
   while IFS= read -r line; do
	   commands_quesitons+=("$line")
   done < "$enter_command_file"

}

# ---------------------------------------------------------------------------------------
# Step 4: Handle True/False Questions
  
True_False() {
   True_False_Quiz() {
  	# Todo:
 	 # - Check if there are any True/False questions loaded
  	if [ ${#true_false_questions[@]} -eq 0 ]; then
	 	 echo "There are no True/False question, Add some"
	 	 return 1
  	fi 

	echo "Starting the Quiz"
	echo "----------------------------------"

  	# - Select a random True/False questions
  	question="${true_false_questions[ $RANDOM % ${#true_false_question[@]}]}"
  
 	# Assign the variables
  	questions_text="${question%|*}" # - This will grab the text before '|'
  	correct_answer="${question##*| }" # - This will grab the text after '|'

  	# - Display the question   
  	echo "$questions_text (t/f)"
  	# ------------------------------------------------------------------------
  	# - Validate the user's input
  	# - Normalise input to uppercase
  	while true; do
	  	read -p "Your answer: " user_answer
		user_answer=$(echo "$user_answer" | tr '[:upper:]' '[:lower:]') # convert to lowercase

	  	if  [[ "$user_answer" == "t" || "$user_answer" == "f" ]]; then
		  	break
	  	else
		 	echo "Invalid input: 't' or 'f' only"
	  	fi
  	done

  	(($total_question++))

  	# - check if the answer is correct (check how you store the correct answer)
  	if [[ "$user_answer" == "$correct_answer" ]]; then
	  	echo "Correct! Goodb Job"
	  	# if user is correct add 1 score
	  	(($score++))
  	else
	  	echo "Incorrect :(, The correect answer is: $correct_answer"
  	fi 

  }
  display_final_score() {
	echo "Quiz Complete"
	echo "------------------------------------"
	echo "Total Questions Attempted: $total_question"
	echo "Total Correct Answeres: $score"

	# Calculate and display percentage
	if [ "$total_questions" -gt 0 ]; then
		percentage=$((100 * score / total_question))
		echo "Your Score percentage: $percentage"
	else
		echo "No questions were answered"
	fi
	echo "-------------------------------------"
  }
   while true; do
 	echo "Try the quiz again?: (y/n)" 
  	read -r user_response

  	if [[ $user_response == "n" ]]; then
		break
	fi
  done
}
# ---------------------------------------------------------------------------------------
# Step 5: Handle Multiple Choice Questions
  
Multiple_Choice() {
  Multiple_Choice_Quiz() {
     #Check if there are any MCQ questions loaded
	if [ ${#multiple_choice_question[@]} -eq 0} ]; then
		echo "There are no multiple choice questions, Add soome"
		return 1
	fi
	
	echo "Starting the Quiz"
	echo "------------------------------------"

     # Select a random Multiple Choice question
     question="${multiple_choice_questions[ RANDOM % ${#multiple_choice_questions[@]}]}"
	
     #Assign the variables
     questions_text="${question%|Choice:*}" # - Texts before 'Choices'
     choices="${question#*Choices: }" # - Texts after 'Choices'
     correct_answer="${question##*Correct: }" # - Correct Answer 

     # Display the questions and choices
     echo "$questions"
     echo "$choices" 
     
     #-------------------------------------------------
     # Validate the users input
     while true; do
	     read -p "You answer (a/b/c/d): " user_answer

	     # Normalize input to uppercase
	     user_answer=$(echo "$user_answer" | tr '[:lower:]' '[:upper:]')

	     # Check if its a valid input
	     if [[ "$user_answer" =~ ^[A-D]$ ]]; then
		     break
	     else
		     echo "Invalid input. Please enter a, b, c, or d only"
	     fi
     done
     #--------------------------------------------------
     ((total_questions++))

     # Check if the answer is correct
     if [[ "$user_answer" == "$correct_answer" ]]; then
	     echo "Correct Answer!"
	     ((score++))
     else
	     echo "Incorrect :( The correect asnwer is $correct_answer"
    fi 
  	echo "---------------------------------------"
  }

  display_final_score() {
    echo "Quiz Complete!"
    echo "------------------------------------"
    echo "Total Questions Attempted: $total_questions"
    echo "Total Correct Answers: $score"

    # Calculate and display percentage
    if [ "$total_questions" -gt 0 ]; then
        percentage=$((100 * score / total_questions))
        echo "Your Score Percentage: $percentage%"
    else
        echo "No questions were attempted."
    fi
    echo "------------------------------------"
  }

  while true; do
     True_False_Quiz
  	echo "Try the quiz again (y/n)"
 	 read -r user_response

 	 if [[ "$user_response" == "n" ]]; then
		 break
	 fi 
    done
}

# ---------------------------------------------------------------------------------------
#  Step 6: Enter the Command Questions

Command() {
    Command_Quiz() {
	# Check if ther are any questions loaded
        if [[ ${#commands_questions[@]} -eq 0 ]]; then
	       echo "There are no questions loaed in the commands.txt"
	       echo "Add some bro"
	else
		return 1
	fi
	
	echo "Starting the Enter Command Quiz"
	echo "----------------------------------------"

	# Select a random command from the array
	question="${commands_questions[ $RANDOM % ${#commands_questions[@]} ]}"

	# Assignnign the variables
	description="${questions%|*}" # The text before the |
	command_name="${questions##*| }" # The text after the |

	# Show the question to the user
	
	echo "Description: $description"
	echo "----------------------------------------"

	# Validate the users input
	
	while true; do
		read -p "Enter the commnad: " user_answer
	
		# put the user input to lowercase
		user_answer=$(echo "$user_input" | tr '[:upper:]' '[:lower:')
		# same goes with command
		correct_command=$(echo "$command_name" | tr '[:upper:]' '[:lower]')

		((total_question++))
		
		# check if the user is righti
		if [[ "$user_input" == "$correct_command"]]; then
			echo "Correct!"
			((score++))
			break
		else
			echo "Incorrect :( Correct command is: $correct_command"
			break
		fi
	done
    }
    display_final_score() {
	echo "Quiz Finished"
	echo "------------------------------------------"
	echo "Total questions: $total_questions"
	echo "Total Correct Answer: $score"

	# Calculate and show percentage
	
	if [ "$total_questions" -gt 0]; then
		percentage=$(( 100 * $score / total_question))
		echo "Your Score Percentage: $percentage"
	else
		echo "No questions were attempted"
	fi
	echo "-------------------------------------------"
    }

    while true; do
	    Command_Quiz
	    echo "Try the quiz again (y/n)"
	    read -r user_response

	    if [[ "$user_response" == "n" ]]; then
		    break
 	    fi
   done 
}
# --------------------------------------------------------------------------------------
# Step 7: Add Questions
#
	# --------------- Adding T/F questions -------------------------
 # Todo:
 # - Ask User to enter the question
 # - Ask User if answer is True / False
 # - Validate the input (T or F only)
 #    	- Normalize input to uppercase
 # - append the question and answer into the True/False question file
 
	# --------------- Adding MCQ questions -------------------------
 # Todo:
 # - Ask user to enter the question
 # - ASk user for the options
 # - Ask for the correct asnwer (1-4)
 # - Validate the correct answer input (1 - 4)
 # - Save the questiion and option to the multiple choice file
 #  - echo "$question | $option1 | $option2 | $option3 | $option4
 


# ---------------------------------------------------------------------------------------
# Step 8: Delete Question
#      #------------------- T/F Questions ------------------------------------
  # Todo:
  # - check if file is not empty
  # - show the quesion in a list formaat
  #    - $((i+1)) ${tru_false_question[$i]}
  #
  # - Ask user the number of the question they want to delte
  # - Validate input
  # - remove the question from the array
  # - rewrite the True/False question to the file without the deleted question
#      #------------------- MCQ Questions ------------------------------------
  # Todo:
  # - check if file is not empy
  # - show the questions in a list format
  
  # - ask the user the number of the question they want to delete
  # - Validate input 
  # - remove the question from the array
  # - rewrite the True/False question to the file without the deleted question
  


# ---------------------------------------------------------------------------------------
# Step 9 : View all qeustions
#
#      #------------------ View T/F Questions ---------------------------
  # Todo:
  # Check if the file exist and is not empty
  # Display all the questions from the file
  # use cat $file
#
#      #----------------- View MCQ Questions ----------------------------
  # Todo:
  # Check if the file exist and is not empty
  # Display all the quetions from the file
  # use cat $file



# ---------------------------------------------------------------------------------------
# Step 10: Main Menu Function
# 
# main_menu() {
#   while loop
   # Welcome
   # 1) Answer True/False Quetion
   # 2) Answer Multiple Choice question
   # 3) View all T/F questions
   # 4) View all MCQ questions
   # 5) Add new questions
   # 6) Delete a new question
   # 7) eixt

   # use case

   # Todo:
   # - Read user input
   # - call the associate function
   # - error handling - invalid input
# }
#
